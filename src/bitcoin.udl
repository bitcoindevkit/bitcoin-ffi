namespace bitcoin {};

// ------------------------------------------------------------------------
// Core types
// ------------------------------------------------------------------------

interface Script {
  constructor(sequence<u8> raw_output_script);
 
  sequence<u8> to_bytes();
};

interface Amount {
  [Name=from_sat]
  constructor(u64 from_sat);

  [Name=from_btc, Throws=ParseAmountError]
  constructor(f64 from_btc);

  u64 to_sat();

  f64 to_btc();
};

interface FeeRate {
  [Name=from_sat_per_vb, Throws=FeeRateError]
  constructor(u64 sat_per_vb);

  [Name=from_sat_per_kwu]
  constructor(u64 sat_per_kwu);

  u64 to_sat_per_vb_ceil();

  u64 to_sat_per_vb_floor();

  u64 to_sat_per_kwu();
};

[Custom]
typedef string Txid;

dictionary OutPoint {
  Txid txid;
  u32 vout;
};

[NonExhaustive]
enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
};

[Traits=(Display)]
interface Address {
  [Throws=AddressParseError]
  constructor(string address, Network network);

  [Name=from_script, Throws=FromScriptError]
  constructor(Script script, Network network);

  Script script_pubkey();

  string to_qr_uri();

  boolean is_valid_for_network(Network network);
};

dictionary TxOut {
  Amount value;
  Script script_pubkey;
};

// ------------------------------------------------------------------------
// Errors
// ------------------------------------------------------------------------

[Error]
enum AddressParseError {
    "Base58",
    "Bech32",
    "WitnessVersion",
    "WitnessProgram",
    "UnknownHrp",
    "LegacyAddressTooLong",
    "InvalidBase58PayloadLength",
    "InvalidLegacyPrefix",
    "NetworkValidation",
    "OtherAddressParseErr",
};

[Error]
interface FromScriptError {
  UnrecognizedScript();
  WitnessProgram(string error_message);
  WitnessVersion(string error_message);
  OtherFromScriptErr();
};

[Error]
interface ParseAmountError {
  OutOfRange();
  TooPrecise();
  MissingDigits();
  InputTooLarge();
  InvalidCharacter(string error_message);
  OtherParseAmountErr();
};

[Error]
interface FeeRateError {
  ArithmeticOverflow();
};
